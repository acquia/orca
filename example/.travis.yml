# Example Travis CI configuration.
#
# This configuration file will cover ORCA integration for most packages almost
# without modification. Use as follows:
#
# 1. Copy this file to your package root:
#
#    $ cp example/.travis.yml ../my_package/.travis.yml
#
# 2. Change the values in env.global for your package. No other changes are
#    strictly necessary for a basic integration.
#
# 3. Strip the (now unnecessary) comments:
#
#    $ sed -i '' '/^[[:blank:]]*#/d;s/#.*//' .travis.yml
#
# For advanced needs,
# @see https://github.com/acquia/orca/blob/develop/docs/advanced-usage.md
---
language: php

# The lowest version of PHP supported by all of Drupal, Acquia, and ORCA itself.
# @see https://www.drupal.org/docs/8/system-requirements/php-requirements
# @see https://docs.acquia.com/acquia-cloud/arch/tech-platform/
php: "7.2"

addons:
  # Chrome is used via ChromeDriver by PHPUnit and Behat.
  chrome: stable

cache:
  directories:
    - "$HOME/.composer/cache"
    - "$HOME/.drush/cache"
    - "$HOME/.rvm"
    - "${TMPDIR:-/tmp}/phpstan/cache"

env:
  # Change the following values for your implementation.
  global:
    # Provide your package's name.
    - ORCA_SUT_NAME=drupal/example
    # Specify the name of the nearest Git version branch, e.g., 1.x or 8.x-1.x.
    # This may be the destination branch of a pull request or the nearest
    # ancestor of a topic branch.
    - ORCA_SUT_BRANCH=8.x-1.x
    # Specify the version of ORCA to use. Use dev-master to track the latest
    # release, dev-develop to track Dev/HEAD, or any other Composer version
    # string.
    # @see https://getcomposer.org/doc/articles/versions.md
    - ORCA_VERSION=dev-master
    # If your package isn't in ORCA's packages.yml or conflicts with details
    # that are, you can modify the active packages configuration at runtime by
    # uncommenting the following line and specifying your own alter file.
    # @see https://github.com/acquia/orca/blob/master/docs/advanced-usage.md#ORCA_PACKAGES_CONFIG_ALTER
    # - ORCA_PACKAGES_CONFIG_ALTER=../example/tests/packages_alter.yml
    #
    # If your package is a Drupal installation profile, uncomment the following
    # line and specify its machine name.
    # @see https://github.com/acquia/orca/blob/master/docs/advanced-usage.md#ORCA_FIXTURE_PROFILE
    # - ORCA_FIXTURE_PROFILE=example
    #
    # Change the PHP Code Sniffer standard used for static analysis. Acceptable
    # values are "AcquiaPHP", "AcquiaDrupalStrict", and
    # "AcquiaDrupalTransitional". Defaults to "AcquiaDrupalTransitional".
    # @see https://github.com/acquia/orca/blob/master/docs/advanced-usage.md#ORCA_PHPCS_STANDARD
    # - ORCA_PHPCS_STANDARD=AcquiaDrupalTransitional
    #
    # To enable telemetry with Amplitude on cron runs, uncomment the following
    # line and set ORCA_AMPLITUDE_API_KEY in your Travis CI repository settings:
    # @see https://github.com/acquia/orca/blob/master/docs/advanced-usage.md#ORCA_TELEMETRY_ENABLE
    # @see https://github.com/acquia/orca/blob/master/docs/advanced-usage.md#ORCA_AMPLITUDE_API_KEY
    # - ORCA_TELEMETRY_ENABLE=TRUE

# Execution time is drastically reduced by splitting the build into multiple
# concurrent jobs.
matrix:
  # Mark the build as finished once the only remaining jobs are allowed to fail.
  fast_finish: true
  include:
    # The standard ORCA jobs provide broad out-of-the-box coverage.
    # @see https://github.com/acquia/orca/blob/master/docs/understanding-orca.md#continuous-integration
    - { name: "Static code analysis", env: ORCA_JOB=STATIC_CODE_ANALYSIS }
    - { name: "Deprecated code scan", env: ORCA_JOB=DEPRECATED_CODE_SCAN }
    - { name: "Isolated test w/ recommended package versions", env: ORCA_JOB=ISOLATED_RECOMMENDED }
    - { name: "Integrated test w/ recommended package versions", env: ORCA_JOB=INTEGRATED_RECOMMENDED }
    - { name: "Integrated test w/ recommended package versions & previous minor release of Drupal core", env: ORCA_JOB=CORE_PREVIOUS }
    - { name: "Isolated test w/ dev package versions", env: ORCA_JOB=ISOLATED_DEV }
    - { name: "Integrated test w/ dev package versions", env: ORCA_JOB=INTEGRATED_DEV }
    - { name: "Integrated test w/ dev package versions & next minor dev version of Drupal core", env: ORCA_JOB=CORE_NEXT }
    # Custom testing needs involving only minor variations on the standard setup
    # can be achieved without custom scripting using the "CUSTOM" ORCA_JOB.
    # @see https://github.com/acquia/orca/blob/master/docs/advanced-usage.md#travis-ci-scripts
    # - { name: "Custom job", env: ORCA_JOB=CUSTOM ORCA_CUSTOM_FIXTURE_INIT_ARGS="--profile=lightning" ORCA_CUSTOM_TESTS_RUN_ARGS="--sut-only" }
  # For various reasons, some jobs are allowed to fail without failing the whole
  # build. They should still be watched for advance notice of future problems.
  # @see https://docs.travis-ci.com/user/customizing-the-build#rows-that-are-allowed-to-fail
  allow_failures:
    # Dev jobs are allowed to fail due to their inherent instability.
    - env: ORCA_JOB=ISOLATED_DEV
    - env: ORCA_JOB=INTEGRATED_DEV
    - env: ORCA_JOB=CORE_NEXT

# Install ORCA and prepare the environment.
before_install:
  - composer create-project --no-dev acquia/orca ../orca "$ORCA_VERSION"
  - ../orca/bin/travis/before_install.sh

# Create the test fixture and place the SUT.
install: ../orca/bin/travis/install.sh

# Display details about the fixture.
before_script: ../orca/bin/travis/before_script.sh

# Run the test script.
script: ../orca/bin/travis/script.sh

# Reserved for future use.
before_cache: ../orca/bin/travis/before_cache.sh

# Reserved for future use.
after_success: ../orca/bin/travis/after_success.sh

# Display debugging information in case of failure.
after_failure: ../orca/bin/travis/after_failure.sh

# Perform final, post-script tasks.
after_script: ../orca/bin/travis/after_script.sh

# Get build notifications.
# @see https://docs.travis-ci.com/user/notifications
# notifications:
#   slack:
#     # @see https://docs.travis-ci.com/user/notifications#configuring-slack-notifications
#     rooms:
#       # Get this value from your Slack Travis CI app configuration and encrypt
#       # it if your .travis.yml is stored in a public repository.
#       # @see https://docs.travis-ci.com/user/notifications#configuring-slack-notifications
#       # @see https://github.com/travis-ci/travis.rb#encrypt
#       - secure: example_value_hdfgubdsifgudfbgs3453durghssecurestringidsuag34522irueg=
#     # Limit to when the build changes from passing to failing or vice versa.
#     on_success: change
#     on_failure: change
#     # Limit to the major version branches.
#     if: branch = env(ORCA_SUT_BRANCH)
#   email:
#     # @see https://docs.travis-ci.com/user/notifications#configuring-email-notifications
#     recipients:
#       # Email distribution lists (groups) are preferable to individual addresses
#       # so that personnel changes don't require corresponding code changes.
#       # Though the online documentation doesn't explicitly mention it, this
#       # value can also be encrypted if your .travis.yml is stored in a public
#       # repository, e.g.:
#       # @code travis encrypt username@example.com
#       # @see https://github.com/travis-ci/travis.rb#encrypt
#       - secure: example_value_hdfgubdsifgudfbgs3453durghssecurestringidsuag34522irueg=
#     # Limit to when the build changes from passing to failing or vice versa.
#     on_success: change
#     on_failure: change
#     # Limit to the major version branches.
#     if: branch = env(ORCA_SUT_BRANCH)
